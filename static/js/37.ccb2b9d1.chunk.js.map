{"version":3,"file":"static/js/37.ccb2b9d1.chunk.js","mappings":"8QAKaA,EAAa,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,YAAYC,EAAa,EAAbA,SACpC,OACI,wBACGD,EAAYE,QAAQC,KAAI,SAAAC,GAAI,OAC7B,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAKE,IAClBC,MAAO,CAACC,KAAKP,GADb,SACyBG,EAAKK,SAFvBL,EAAKE,GADe,KAStC,ECJc,SAASI,IACtB,MCVuB,WAAO,IAAD,EAC3B,GAA4BC,EAAAA,EAAAA,MAA5B,eAAOC,EAAP,KAAeC,EAAf,KAYE,MAAM,CACJC,MAZO,UAAGF,EAAOG,IAAI,gBAAd,QAA0B,GAajCC,aAViB,SAACC,GAIpBL,EAAOM,IAAI,QAASD,GACpBJ,EAAUD,EACX,EAMJ,CDPgCO,GAAvBH,EAAR,EAAQA,aAAaF,EAArB,EAAqBA,MACvB,GAAsCM,EAAAA,EAAAA,UAAS,IAA/C,eAAOpB,EAAP,KAAoBqB,EAApB,KACA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAOE,EAAP,KAAcC,EAAd,KACMtB,GAAWuB,EAAAA,EAAAA,MAiBb,OAbJC,EAAAA,EAAAA,YAAU,WAAK,wCACf,8GAEyBC,EAAAA,EAAAA,IAAgB,OAACZ,QAAD,IAACA,EAAAA,EAAQQ,GAFlD,OAEUK,EAFV,OAGIN,EAAeM,GAHnB,wGADe,uBAAC,WAAD,wBASfC,EACC,GAAC,CAACN,EAAMR,KAIL,4BACI,SAAC,KAAD,CACEe,cAAe,CACbP,MAAO,IAETQ,SAAU,SAAAC,GACRR,EAASQ,EAAOT,OAChBN,EAAae,EAAOT,MACrB,EAPH,SASG,gBAAGU,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,UAAC,KAAD,YACE,SAAC,KAAD,CAAOC,KAAK,UACXF,EAAOV,OAASW,EAAQX,OACvB,yBAAMU,EAAOV,QACX,MACJ,mBAAQa,KAAK,SAAb,sBANH,IAUFrB,GAAgC,IAAvBd,EAAYoC,SACtB,SAACrC,EAAD,CACAC,YAAaA,EACbC,SAAUA,MAKjB,C,+LE5DKoC,EAAQ,mCACdC,EAAAA,EAAAA,SAAAA,QAAyB,gCAGlB,IAAMC,EAAkB,mCAAG,oGACVD,EAAAA,EAAAA,IAAA,qCAAwCD,EAAxC,oBADU,cACzBV,EADyB,yBAEvBA,EAAOa,MAFgB,2CAAH,qDAKlBd,EAAgB,mCAAG,WAAOJ,GAAP,uFACPgB,EAAAA,EAAAA,IAAA,gCAAmCD,EAAnC,kBAAmDf,EAAnD,oBADO,cACtBK,EADsB,yBAEpBA,EAAOa,MAFa,2CAAH,sDAKhBC,EAAiB,mCAAG,WAAOC,GAAP,uFACRJ,EAAAA,EAAAA,IAAA,gBAAmBI,EAAnB,mCAAoDL,IAD5C,cACvBV,EADuB,yBAEtBA,EAAOa,MAFe,2CAAH,sDAKjBG,EAAsB,mCAAG,WAAOD,GAAP,uFACbJ,EAAAA,EAAAA,IAAA,gBAAmBI,EAAnB,2CAA4DL,IAD/C,cAC5BV,EAD4B,yBAE3BA,EAAOa,MAFoB,2CAAH,sDAKtBI,EAAsB,mCAAG,WAAOF,GAAP,uFACbJ,EAAAA,EAAAA,IAAA,gBAAmBI,EAAnB,2CAA4DL,IAD/C,cAC5BV,EAD4B,yBAE3BA,EAAOa,MAFoB,2CAAH,qD","sources":["components/ListSearch/ListSearch.js","pages/Movies/Movies.js","hook/useSearch.js","service/serviceApi.js"],"sourcesContent":["import { Link } from \"react-router-dom\"\n\n\n\n\nexport const ListSearch = ({searchValue,location}) =>{\n    return(\n        <ul>\n          {searchValue.results.map(elem => \n          <li key={elem.id}>\n            <Link to={`${elem.id}`} \n            state={{from:location}}>{elem.title}\n            </Link>\n          </li>\n          )}\n          </ul>\n    )\n}","import { Formik, Field, Form } from \"formik\";\nimport {useEffect, useState } from \"react\";\nimport { useLocation,} from \"react-router-dom\";\nimport { serviceAPISearch } from \"service/serviceApi\";\nimport { useSearch } from \"hook/useSearch\";\nimport { ListSearch } from \"components/ListSearch/ListSearch\";\n\n\n\n\n// const savedLocalStorage = localStorage.getItem('thisSearch')\n\n\nexport default function Movies(){\n  const { changeSearch,query } = useSearch()\nconst [searchValue, setSearchValue] = useState([])\nconst [value, setValue] = useState('')\nconst location = useLocation();\n\n\n\nuseEffect(() =>{\nasync function getApiSearchValue() {\n  try{\n    const getApi = await serviceAPISearch(query?? value)\n    setSearchValue(getApi)\n  }catch{\n\n  }\n}\ngetApiSearchValue()\n},[value,query])\n\n\n    return(\n    <div>\n        <Formik\n          initialValues={{\n            value: ''\n          }}\n          onSubmit={values => {\n            setValue(values.value)\n            changeSearch(values.value)\n          }}\n        >\n          {({ errors, touched }) => (\n            <Form>\n              <Field name=\"value\" />\n              {errors.value && touched.value ? (\n                <div>{errors.value}</div>\n              ) : null}\n              <button type=\"submit\">Search</button>\n            </Form>\n          )}\n        </Formik>\n        {query && searchValue.length !== 0 && \n        <ListSearch \n        searchValue={searchValue}\n        location={location}\n        />\n        }\n      </div>\n      )\n}","import { useSearchParams } from \"react-router-dom\"\n\n\n\nexport const useSearch = () => {\n    const [params, setParams] = useSearchParams();\n    const query = params.get('query') ?? '';\n\n\n    const changeSearch = (evt) => {\n      if (query !== evt) {\n        \n      }\n      params.set('query', evt);\n      setParams(params);\n    };\n    \n      return{\n        query,\n        changeSearch\n      }\n}","import axios from 'axios';\n\n\nconst KeyApi= '891cc72aafe06da2b3bebc54fcfb98d7'\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/'\n\n\nexport const serviceAPITrending = async () =>{\n   const getApi = await axios.get(`trending/movie/day?api_key=${KeyApi}&language=en-US`)\n    return getApi.data\n}\n\nexport const serviceAPISearch = async (value) =>{\n    const getApi = await axios.get(`/search/movie?api_key=${KeyApi}&query=${value}&language=en-US`)\n     return getApi.data\n }\n\nexport const serviceApiMovieId = async (elemId) =>{\n    const getApi = await axios.get(`movie/${elemId}?language=en-US&api_key=${KeyApi}`)\n    return getApi.data\n}\n\nexport const serviceApiMovieCredits = async (elemId) =>{\n    const getApi = await axios.get(`movie/${elemId}/credits?language=en-US&api_key=${KeyApi}`)\n    return getApi.data\n}\n\nexport const serviceApiMovieReviews = async (elemId) =>{\n    const getApi = await axios.get(`movie/${elemId}/reviews?language=en-US&api_key=${KeyApi}`)\n    return getApi.data\n}\n"],"names":["ListSearch","searchValue","location","results","map","elem","to","id","state","from","title","Movies","useSearchParams","params","setParams","query","get","changeSearch","evt","set","useSearch","useState","setSearchValue","value","setValue","useLocation","useEffect","serviceAPISearch","getApi","getApiSearchValue","initialValues","onSubmit","values","errors","touched","name","type","length","KeyApi","axios","serviceAPITrending","data","serviceApiMovieId","elemId","serviceApiMovieCredits","serviceApiMovieReviews"],"sourceRoot":""}